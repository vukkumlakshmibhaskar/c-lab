#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100
struct Stack {
    int items[MAX_SIZE];
    int top;
};

void initialize(struct Stack* stack) {
    stack->top = -1; // Initialize top as -1 to indicate an empty stack
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1; // Return 1 if stack is empty, 0 otherwise
}

int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1; // Return 1 if stack is full, 0 otherwise
}

void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow\n");
    } else {
        stack->items[++stack->top] = value;
        printf("%d pushed to stack\n", value);
    }
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow\n");
        return -1; // Return -1 if stack is empty
    } else {
        return stack->items[stack->top--];
    }
}

int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return -1; // Return -1 if stack is empty
    } else {
        return stack->items[stack->top];
    }
}

int main() {
    struct Stack stack;
    initialize(&stack);

    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    printf("Top element: %d\n", peek(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Top element: %d\n", peek(&stack));

    return 0;
}
